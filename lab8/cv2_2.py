import cv2

# Загрузка классификаторов Хаара для лиц и глаз
# Используем предварительно обученные модели для обнаружения лиц и глаз
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# Загрузка изображения
# Указываем путь к изображению, которое будем анализировать
image_path = 'img_3.png'  # Укажите путь к вашему изображению
image = cv2.imread(image_path)  # Загружаем изображение с помощью OpenCV

# Преобразование изображения в оттенки серого
# Классификаторы Хаара работают с изображениями в градациях серого, поэтому преобразуем цветное изображение
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Обнаружение лиц на изображении
# Используем метод detectMultiScale для поиска лиц на изображении
# scaleFactor: параметр, определяющий, насколько уменьшается изображение при каждом масштабе
# minNeighbors: параметр, определяющий, сколько соседей должен иметь каждый прямоугольник-кандидат, чтобы его удержать
# minSize: минимальный размер объекта, который будет считаться лицом
faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

# Перебор всех обнаруженных лиц и выделение их на изображении
for (x, y, w, h) in faces:
    # Рисуем прямоугольник вокруг лица
    # (x, y) - координаты верхнего левого угла прямоугольника
    # (x + w, y + h) - координаты нижнего правого угла прямоугольника
    # (255, 0, 0) - цвет прямоугольника (синий)
    # 2 - толщина линии
    cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)

    # Область изображения, соответствующая лицу
    # Выделяем область лица в градациях серого и в цветном изображении
    roi_gray = gray[y:y + h, x:x + w]
    roi_color = image[y:y + h, x:x + w]

    # Обнаружение глаз в области лица
    # Используем метод detectMultiScale для поиска глаз в области лица
    eyes = eye_cascade.detectMultiScale(roi_gray)

    # Рисуем прямоугольники вокруг глаз
    for (ex, ey, ew, eh) in eyes:
        # (ex, ey) - координаты верхнего левого угла прямоугольника вокруг глаза
        # (ex + ew, ey + eh) - координаты нижнего правого угла прямоугольника вокруг глаза
        # (0, 255, 0) - цвет прямоугольника (зеленый)
        # 2 - толщина линии
        cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)
    break

# Отображение результата
# Отображаем изображение с обнаруженными лицами и глазами
cv2.imshow('Detected Faces and Eyes', image)

# Ожидание нажатия любой клавиши
# Программа будет ждать, пока пользователь не нажмет любую клавишу
cv2.waitKey(0)

# Закрытие всех окон
# После нажатия клавиши все окна, открытые OpenCV, будут закрыты
cv2.destroyAllWindows()